{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Quickstart","text":"<p><code>satctl</code> can be installed via pip, or uv, in different flavors.</p> <pre><code># via pip\n$ pip install satctl\n# via uv\n$ uv add satctl\n# including CLI tools\n$ uv add satctl[console]\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p><code>satctl</code> tries to be as modular as possible, giving the user the possibility to stop the process at any time in the pipeline, from searching to converting the raw data into a GeoTIFF.</p> <p>Here's a simple example of usage.</p> <pre><code>from datetime import datetime\nfrom pathlib import Path\n\nfrom satctl.model import ConversionParams, SearchParams\nfrom satctl.sources import create_source\nfrom satctl.writers import create_writer\n\nif __name__ == \"__main__\":\n    # search available satellites and products\n    names = list_sources(name=\"s2*\")\n\n    # or directly create any source\n    source = create_source(\"slstr\")\n)\n    # Define a research area, from file or as a simple Polygon\n    area_file = Path(\"my_aoi.geojson\")\n\n    # filter by space, time or source options\n    params = SearchParams.from_file(\n        path=area_file,\n        datetime(2025, 8, 15),\n        end=datetime(2025, 8, 16),\n    )\n    items = source.search(params)\n\n    # download the tiles locally\n    downloaded, fail = source.download(\n        items,\n        destination=Path(\"downloads/\"),\n        num_workers=4,\n    )\n\n    # ... load an item as a satpy Scene ...\n    sene = source.load_scene(items[0], datasets=[\"S3\", \"S2\", \"S1\"])\n\n    # ... or store them directly on file\n    writer = create_writer(\"geotiff\")\n    source.save(\n        downloaded,\n        params=ConversionParams.from_file(\n            path=area_file,\n            target_crs=\"4326\",\n            datasets=[\"all_bands_h\"],\n            resolution=500,\n        ),\n        destination=Path(\"results/\"),\n        writer=writer,\n        num_workers=4,\n    )\n</code></pre> <p>For more examples and use cases, see the documentation.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributing requires the following tools: <code>uv</code> for environment and project management, <code>ruff</code> for linting and formatting, <code>pyright</code> for standard type checking. Formatting, linting and type checking is enforced at <code>pre-commit</code> and CI level.</p> <p>The easiest way to quickstart is the following: <pre><code># prepare the environment, requires uv\n$ make install\n</code></pre></p> <p>More information about contributing will be added in the main documentation</p>"}]}